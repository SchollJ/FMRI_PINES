{"title":"Image Quality Metrics Individual level","markdown":{"yaml":{"title":"Image Quality Metrics Individual level","author":"Anastasios Dadiotis","editor":"visual","toc":true,"format":{"html":{"code-tools":true,"self-contained":true,"code_evaluate":false}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nBased on the email exchange with Jerome Prado and Charlotte Constant, we can use the following [toolbox](https://github.com/elizabethbeard/mriqception) to set a threshold for IQMs of interest \\[median ± 2.5 x (75% quartile-25% quartile)\\] that we calculate with API data and then compare it to IQMs of the participants. They did that to group level, but after discussing with Charlotte we can do it to individual level as well.\n\nThe only obstacle is that in the group level there is a .csv file with the IQMs, but in the individual level we have to extract the IQMs from the html file.\n\n# IQMs extraction\n\nPython code to extract the IQMs from the html file:\n\nThis script can be found in the followig path: /Volumes/psyr2/Anastasios/Tiger_fmri/Tiger/code/mriqc_html_checks.py\n\nFor more information on how to run the script, see the script documentation.\n\n``` {.python filename=\"mriqc_html_checks.py\"}\n#!/usr/bin/env python3\n\n\"\"\"\nTitle: Check MRIQC HTML files metrics checks\nAuthor: Anastasios Dadiotis\nDate created: 18/04/2024\nDate last modified: 18/04/2024\nPython Version: 3.9\n\"\"\"\n\"\"\"\nThis script will check the MRIQC HTML files for the metrics checks. It will extract the data from the tables and check if the values are \nwithin the expected range. \nIf the values are within the expected range, it will update the Checks.csv file with the results. \nIf the values are not within the expected range, it will write the results to a file for further investigation.\nIt can be used as main script or as a module to be imported in other scripts.\nIf run as a main script, it will take the working directory, the study name and the subject ID as arguments.\n\"\"\"\n\nimport os \nfrom bs4 import BeautifulSoup\nimport sys\nimport lxml.html as html\nimport pandas as pd\nimport html5lib\n\n# =============================================================================\n# Helper functions\n# =============================================================================\n\ndef load_and_parse_html(file_path):\n    \"\"\"\n    Load and parse an HTML file.\n    \n    Parameters\n    ----------\n    file_path : str\n        The path to the HTML file.\n        \n    Returns\n    -------\n    BeautifulSoup object\n        The parsed HTML content.\n    \n    Raises\n    ------\n    Exception\n        If an error occurs while processing the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            html_content = file.read()\n        soup = BeautifulSoup(html_content, 'lxml')\n        return soup\n    except Exception as e:\n        print(f\"An error occurred while processing{file_path}: {e}\")\n        return None\n\ndef extract_table_data(soup, table_id):\n    \"\"\"\n    Extract data from a table in an HTML file.\n    \n    Parameters\n    ----------\n    soup : BeautifulSoup object\n        The parsed HTML content.\n    table_id : str\n        The id of the table to extract the data from.\n        \n    Returns\n    -------\n    list\n        A list of lists containing the data from the table.\n\n    Raises\n    ------\n    Exception\n        If an error occurs while extracting data from the table.\n\n    Notes: if the table is not found, the function will return an empty list.\n    \"\"\"\n    try:\n        table = soup.find('table', id=table_id)\n        # Initialize an empty list to store your data\n        data = []\n        # Check if the table was found\n        if table:\n            rows = table.find_all('tr')\n            for row in rows:\n                cols = [td.get_text(strip=True) for td in row.find_all('td')]\n                if cols:\n                    data.append(cols)\n        return data\n    except Exception as e:\n        print(f\"An error occurred while extracting data from the table: {e}\")\n        return None\n    \n\ndef df_from_list(table_list):\n    \"\"\"\n    Create a pandas DataFrame from a list of lists extracted from an HTML table. IF subtitles are missing, they will be added as empty strings.\n    \n    Parameters\n    ----------\n    table_list : list\n        A list of lists containing the data to be converted to a DataFrame.\n        \n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame containing the data from the list of lists.\n    \"\"\"\n\n    for list in table_list:\n        if len(list) == 2:\n            list.insert(1, \"\")\n            list.insert(2, \"\")\n        elif len(list) == 3:\n            list.insert(2, \"\")\n        elif len(list) == 4:\n            continue\n        else:\n            print(\"Error in the table\")\n            break\n\n\n    # Create a pandas DataFrame from the table data\n    df = pd.DataFrame(table_list, columns=['Metric', 'Subtitle_1', 'Subtitle_2', 'Value'])\n    return df\n\n\n# =============================================================================\n# Variable definitions\n# To be replaced with sys.argv later\n# =============================================================================\n\n# Define the directory path\n# will use sys.argv for those variables later\nWD=\"/crnldata/psyr2/Anastasios/Tiger_fmri\"\nmy_study=\"Tiger\"\nsubject=\"CO1\"\n\n# Build the path to the mriqc html files\ndirectory_path = f'/Volumes/{WD}/{my_study}/data/bids/derivatives/mriqc' # NOTE: Volumes to be removed to run on the server!!!\n\n\n# =============================================================================\n# Main script\n# =============================================================================\n\n# get all the files in the directory to be able to loop through them later NOTE: to do after everything is working fine\n\nfile = \"sub-CO1_ses-S01_task-BigBuckBunny_echo-1_bold.html\" # just for testing, will not be hardcoded in the final version\n\nfilepath = f'{directory_path}/{file}'\n\n\n# Load and parse the HTML file\nsoup = load_and_parse_html(filepath)\n\ntable_list_test = extract_table_data(soup, 'about-metadata-table-2')\n\n# to be removed after testing\nprint(table_list_test)\n\ndf_test = df_from_list(table_list_test)\n\n# to be removed after testing\nprint(df_test)\n\n# TODO: Go over the metrics and check if they are within the expected range, if yes update the Checks.csv file with the results\n# if not write the results to a file for further investigation \n```\n\n# ToDO\n\n-   [ ] Find the expected range for each metric from the API data given our parameters\n-   [ ] Implement that on the above scripts and add checks\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nBased on the email exchange with Jerome Prado and Charlotte Constant, we can use the following [toolbox](https://github.com/elizabethbeard/mriqception) to set a threshold for IQMs of interest \\[median ± 2.5 x (75% quartile-25% quartile)\\] that we calculate with API data and then compare it to IQMs of the participants. They did that to group level, but after discussing with Charlotte we can do it to individual level as well.\n\nThe only obstacle is that in the group level there is a .csv file with the IQMs, but in the individual level we have to extract the IQMs from the html file.\n\n# IQMs extraction\n\nPython code to extract the IQMs from the html file:\n\nThis script can be found in the followig path: /Volumes/psyr2/Anastasios/Tiger_fmri/Tiger/code/mriqc_html_checks.py\n\nFor more information on how to run the script, see the script documentation.\n\n``` {.python filename=\"mriqc_html_checks.py\"}\n#!/usr/bin/env python3\n\n\"\"\"\nTitle: Check MRIQC HTML files metrics checks\nAuthor: Anastasios Dadiotis\nDate created: 18/04/2024\nDate last modified: 18/04/2024\nPython Version: 3.9\n\"\"\"\n\"\"\"\nThis script will check the MRIQC HTML files for the metrics checks. It will extract the data from the tables and check if the values are \nwithin the expected range. \nIf the values are within the expected range, it will update the Checks.csv file with the results. \nIf the values are not within the expected range, it will write the results to a file for further investigation.\nIt can be used as main script or as a module to be imported in other scripts.\nIf run as a main script, it will take the working directory, the study name and the subject ID as arguments.\n\"\"\"\n\nimport os \nfrom bs4 import BeautifulSoup\nimport sys\nimport lxml.html as html\nimport pandas as pd\nimport html5lib\n\n# =============================================================================\n# Helper functions\n# =============================================================================\n\ndef load_and_parse_html(file_path):\n    \"\"\"\n    Load and parse an HTML file.\n    \n    Parameters\n    ----------\n    file_path : str\n        The path to the HTML file.\n        \n    Returns\n    -------\n    BeautifulSoup object\n        The parsed HTML content.\n    \n    Raises\n    ------\n    Exception\n        If an error occurs while processing the file.\n    \"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            html_content = file.read()\n        soup = BeautifulSoup(html_content, 'lxml')\n        return soup\n    except Exception as e:\n        print(f\"An error occurred while processing{file_path}: {e}\")\n        return None\n\ndef extract_table_data(soup, table_id):\n    \"\"\"\n    Extract data from a table in an HTML file.\n    \n    Parameters\n    ----------\n    soup : BeautifulSoup object\n        The parsed HTML content.\n    table_id : str\n        The id of the table to extract the data from.\n        \n    Returns\n    -------\n    list\n        A list of lists containing the data from the table.\n\n    Raises\n    ------\n    Exception\n        If an error occurs while extracting data from the table.\n\n    Notes: if the table is not found, the function will return an empty list.\n    \"\"\"\n    try:\n        table = soup.find('table', id=table_id)\n        # Initialize an empty list to store your data\n        data = []\n        # Check if the table was found\n        if table:\n            rows = table.find_all('tr')\n            for row in rows:\n                cols = [td.get_text(strip=True) for td in row.find_all('td')]\n                if cols:\n                    data.append(cols)\n        return data\n    except Exception as e:\n        print(f\"An error occurred while extracting data from the table: {e}\")\n        return None\n    \n\ndef df_from_list(table_list):\n    \"\"\"\n    Create a pandas DataFrame from a list of lists extracted from an HTML table. IF subtitles are missing, they will be added as empty strings.\n    \n    Parameters\n    ----------\n    table_list : list\n        A list of lists containing the data to be converted to a DataFrame.\n        \n    Returns\n    -------\n    pandas.DataFrame\n        A DataFrame containing the data from the list of lists.\n    \"\"\"\n\n    for list in table_list:\n        if len(list) == 2:\n            list.insert(1, \"\")\n            list.insert(2, \"\")\n        elif len(list) == 3:\n            list.insert(2, \"\")\n        elif len(list) == 4:\n            continue\n        else:\n            print(\"Error in the table\")\n            break\n\n\n    # Create a pandas DataFrame from the table data\n    df = pd.DataFrame(table_list, columns=['Metric', 'Subtitle_1', 'Subtitle_2', 'Value'])\n    return df\n\n\n# =============================================================================\n# Variable definitions\n# To be replaced with sys.argv later\n# =============================================================================\n\n# Define the directory path\n# will use sys.argv for those variables later\nWD=\"/crnldata/psyr2/Anastasios/Tiger_fmri\"\nmy_study=\"Tiger\"\nsubject=\"CO1\"\n\n# Build the path to the mriqc html files\ndirectory_path = f'/Volumes/{WD}/{my_study}/data/bids/derivatives/mriqc' # NOTE: Volumes to be removed to run on the server!!!\n\n\n# =============================================================================\n# Main script\n# =============================================================================\n\n# get all the files in the directory to be able to loop through them later NOTE: to do after everything is working fine\n\nfile = \"sub-CO1_ses-S01_task-BigBuckBunny_echo-1_bold.html\" # just for testing, will not be hardcoded in the final version\n\nfilepath = f'{directory_path}/{file}'\n\n\n# Load and parse the HTML file\nsoup = load_and_parse_html(filepath)\n\ntable_list_test = extract_table_data(soup, 'about-metadata-table-2')\n\n# to be removed after testing\nprint(table_list_test)\n\ndf_test = df_from_list(table_list_test)\n\n# to be removed after testing\nprint(df_test)\n\n# TODO: Go over the metrics and check if they are within the expected range, if yes update the Checks.csv file with the results\n# if not write the results to a file for further investigation \n```\n\n# ToDO\n\n-   [ ] Find the expected range for each metric from the API data given our parameters\n-   [ ] Implement that on the above scripts and add checks\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"self-contained":true,"output-file":"IQMs_individual.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","title":"Image Quality Metrics Individual level","author":"Anastasios Dadiotis","editor":"visual","code_evaluate":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}